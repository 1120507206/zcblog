(window.webpackJsonp=window.webpackJsonp||[]).push([[242],{600:function(n,e,s){"use strict";s.r(e);var t=s(7),a=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"vue自定义指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue自定义指令"}},[n._v("#")]),n._v(" vue自定义指令")]),n._v(" "),e("p",[n._v("vue的自定义指令大家因该都用过了，很早之前我也写过一个关于来做权限判断相关的的自定义指令，不过那是很久之前的事了。")]),n._v(" "),e("p",[n._v("本次要写的是关于最近在开发中遇到的问题，并记录我是如何使用vue的自定义指令解决的")]),n._v(" "),e("h2",{attrs:{id:"背景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[n._v("#")]),n._v(" 背景")]),n._v(" "),e("p",[n._v("本次的背景为产品的一个需求，要求输入框只能输入正整数。这是一个正常也很常见的需求，只要在输入框失焦或者改变的时候用正则判断一下就行，之前也写过。但是这次有点不一样的地方在于这次的输入框有多，我数了下大概有十几个。这要是一个个写不得累死，而且这十几个输入框不在同一个页面。我刚开始的想法是抽离为函数，但是我想了一下，抽离为函数也还不是很方便，随后想到了自定义指令，这个vue提供的强大功能，用很少的代码就可以实现功能并且可以在任意界面使用，话不多说，直接开始。")]),n._v(" "),e("p",[n._v("自定义指令第一步，在main.js 中先定义自定义指令。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 自定义指令  只能输入正整数\nVue.directive('positive-integer', {\n  bind (el, binding, vnode) {\n  const dom = el.querySelector('input')\n  let flag = true\n   dom.addEventListener('compositionstart',function(){//中文输入开始\n      flag = false;\n  });\n  dom.addEventListener('compositionend',function(){//中文输入结束\n      flag = true;\n       const inputValues = el.querySelector('input').value\n    el.querySelector('input').value = inputValues.replace(/[^\\d]/g, '')\n\n  });\n\n    // 绑定 input 事件\n  dom.addEventListener('input', function () {\n    const inputValue = el.querySelector('input').value\n    if (!flag) {\n      return\n    }\n    if (!inputValue) {\n      return\n    }\n      // 获取组件绑定的值\n      const val = inputValue\n      let rawValue = val || '' // 如果value为undefined或null，则使用空字符串代替\n      const value = rawValue.replace(/[^\\d]/g, '') // 去除非数字字符\n      el.querySelector('input').value = value // 赋值\n    })\n  },\n    unbind: function (el) {\n    el.removeEventListener('input', el.handler)\n  }\n})\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br")])]),e("p",[n._v("这段代码很简单，就在input输入的时候监听，利用正则去除非整数的值，然后替换就好了。")]),n._v(" "),e("p",[n._v("自定义指令第二步，在需要用的地方注入")]),n._v(" "),e("p",[e("code",[n._v('<Input maxlength="10" v-model="autoFormData.totalQuantity" v-positive-integer placeholder="请输入">')])]),n._v(" "),e("p",[n._v("很简单的，只要在对应的input输入框中使用”"),e("code",[n._v("v-positive-integer")]),n._v("“就ok了")]),n._v(" "),e("p",[n._v("这段自定义指令代码很简单，但是还是废了我不少时间，其中花费最多的就是")]),n._v(" "),e("p",[n._v("`let flag = true\ndom.addEventListener('compositionstart',function(){//中文输入开始\nflag = false;\n});\ndom.addEventListener('compositionend',function(){//中文输入结束\nflag = true;\nconst inputValues = el.querySelector('input').value\nel.querySelector('input').value = inputValues.replace(/[^\\d]/g, '')")]),n._v(" "),e("p",[n._v("});`")]),n._v(" "),e("p",[n._v("这一段代码了，最开始没有加这段代码的时候功能也能用，但是当你输入中文的时候会有很奇怪的事发生，就是他会把你输入框已有的值给删除。我查mdn文档时发现，当我们通过输入法输入中文时，会触发 "),e("code",[n._v("compositionstart")]),n._v("事件和 "),e("code",[n._v("compositionend，具体为中文输入开始和结束。这就会导致代码被替换两次，从而删除输入框的值。而加了这段代码，我会在中文输入开始的时候将变量置为false，终止后面的代码，然后再中文输入结束的时候在执行代码替换，从而实现所需功能。")])]),n._v(" "),e("p",[n._v("总结:前端的路真是一眼难进，东西随然不难，但是要注意的东西太多了，我也是今天才知道input输入框中英文输入竟然时不同的，长知识了，看来还是要平常多记录，多留心才行。")])])}),[],!1,null,null,null);e.default=a.exports}}]);